"use strict";
// Copyright 2020 Google Inc. Use of this source code is governed by an
// MIT-style license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageTransformer = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const utils_1 = require("./utils");
const embedded_sass_pb_1 = require("./vendor/embedded_sass_pb");
/**
 * Encodes InboundMessages into protocol buffers and decodes protocol buffers
 * into OutboundMessages.
 */
class MessageTransformer {
    constructor(outboundProtobufs$, writeInboundProtobuf) {
        this.outboundProtobufs$ = outboundProtobufs$;
        this.writeInboundProtobuf = writeInboundProtobuf;
        // The decoded messages are written to this Subject. It is publicly exposed
        // as a readonly Observable.
        this.outboundMessagesInternal$ = new rxjs_1.Subject();
        /**
         * The OutboundMessages, decoded from protocol buffers. If this fails to
         * decode a message, it will emit an error.
         */
        this.outboundMessages$ = this.outboundMessagesInternal$.pipe();
        this.outboundProtobufs$
            .pipe((0, operators_1.map)(decode))
            .subscribe(this.outboundMessagesInternal$);
    }
    /**
     * Converts the inbound `message` to a protocol buffer.
     */
    writeInboundMessage(message) {
        try {
            this.writeInboundProtobuf(message.toBinary());
        }
        catch (error) {
            this.outboundMessagesInternal$.error(error);
        }
    }
}
exports.MessageTransformer = MessageTransformer;
// Decodes a protobuf `buffer` into an OutboundMessage, ensuring that all
// mandatory message fields are populated. Throws if `buffer` cannot be decoded
// into a valid message, or if the message itself contains a Protocol Error.
function decode(buffer) {
    try {
        return embedded_sass_pb_1.OutboundMessage.fromBinary(buffer);
    }
    catch (error) {
        throw (0, utils_1.compilerError)('Invalid buffer');
    }
}
//# sourceMappingURL=message-transformer.js.map